load("//node:internal/dar.bzl", "dar_attrs", "dar_execute")
load("//node:internal/dson.bzl", "dson_attrs", "dson_execute")
load("//node:internal/sha256.bzl", "sha256_attrs", "sha256_execute")
load("//node:internal/node_utils.bzl", "execute", "node_attrs")

BUILD_FILE = """package(default_visibility = ["//visibility:public"])
filegroup(
  name = "modules",
  srcs = ["node_modules"],
)
exports_files(glob(["node_modules/**/bin/*"]))
"""

_node_modules_attrs = node_attrs + dar_attrs + dson_attrs + sha256_attrs + {
    "_yarn": attr.label(
        default = Label("@com_github_yarnpkg_yarn//:bin/yarn.js"),
        single_file = True,
        allow_files = True,
        executable = True,
        cfg = "host",
    ),
    "registry": attr.string(),
    "deps": attr.string_dict(mandatory = True),
}

def _node_modules_impl(ctx):
    node = ctx.path(ctx.attr.node)
    nodedir = node.dirname.dirname
    yarn = ctx.path(ctx.attr._yarn)
    modules_path = ctx.attr.dar_root

    modules = []
    for k, v in ctx.attr.deps.items():
        if v:
            modules.append("%s@%s" % (k, v))
        else:
            modules.append(k)

    cmd = [
        node,
        yarn,
        "add",
        "--modules_folder", ctx.path(""),
    ]

    cmd += modules

    #print("cmd: %s" % cmd)
    output = execute(ctx, cmd).stdout
    #print("yarn install output: %s" % output)

    if ctx.attr.sha256:
        dson_execute(ctx, dson_path = "node_modules")
        dar_execute(ctx, dar_root = "node_modules")
        sha256_execute(ctx, "node_modules.tar")


    ctx.file("BUILD", BUILD_FILE)

node_modules = repository_rule(
    implementation = _node_modules_impl,
    attrs = _node_modules_attrs,
)
